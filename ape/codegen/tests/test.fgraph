((lp1
ccopy_reg
_reconstructor
p2
(ctheano.tensor.basic
TensorVariable
p3
c__builtin__
object
p4
NtRp5
(dp6
S'owner'
p7
NsS'index'
p8
NsS'tag'
p9
(itheano.gof.utils
scratchpad
p10
(dp11
S'trace'
p12
(lp13
(S'/home/mrocklin/workspace/ape/ape/master.py'
p14
I272
S'<module>'
p15
S'from ape.examples.kalman import inputs, outputs, input_shapes'
tp16
a(S'ape/examples/kalman.py'
p17
I5
g15
S"Sigma = theano.tensor.matrix('Sigma')"
tp18
a(S'/home/mrocklin/workspace/theano/theano/tensor/basic.py'
p19
I1163
S'matrix'
p20
S'return type(name)'
tp21
a(S'/home/mrocklin/workspace/theano/theano/gof/type.py'
p22
I319
S'__call__'
p23
S'return utils.add_tag_trace(self.make_variable(name))'
tp24
asbsS'type'
p25
g2
(ctheano.tensor.basic
TensorType
p26
g4
NtRp27
(dp28
S'broadcastable'
p29
(I00
I00
tp30
sS'dtype'
p31
S'float32'
p32
sS'numpy_dtype'
p33
cnumpy
dtype
p34
(S'f4'
I0
I1
tRp35
(I3
S'<'
NNNI-1
I-1
I0
tbsS'name'
p36
Nsbsg36
S'Sigma'
p37
sbag2
(g3
g4
NtRp38
(dp39
g7
Nsg8
Nsg9
(itheano.gof.utils
scratchpad
p40
(dp41
g12
(lp42
(g14
I272
g15
S'from ape.examples.kalman import inputs, outputs, input_shapes'
tp43
a(g17
I6
g15
S"H = theano.tensor.matrix('H')"
tp44
a(g19
I1163
g20
S'return type(name)'
tp45
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp46
asbsg25
g2
(g26
g4
NtRp47
(dp48
g29
(I00
I00
tp49
sg31
g32
sg33
g35
sg36
Nsbsg36
S'H'
sbag2
(g3
g4
NtRp50
(dp51
g7
Nsg8
Nsg9
(itheano.gof.utils
scratchpad
p52
(dp53
g12
(lp54
(g14
I272
g15
S'from ape.examples.kalman import inputs, outputs, input_shapes'
tp55
a(g17
I7
g15
S"R = theano.tensor.matrix('R')"
tp56
a(g19
I1163
g20
S'return type(name)'
tp57
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp58
asbsg25
g2
(g26
g4
NtRp59
(dp60
g29
(I00
I00
tp61
sg31
g32
sg33
g35
sg36
Nsbsg36
S'R'
sba(lp62
g2
(ctheano.gof.graph
Variable
p63
g4
NtRp64
(dp65
g7
g2
(ctheano.gof.graph
Apply
p66
g4
NtRp67
(dp68
S'inputs'
p69
(lp70
g2
(g63
g4
NtRp71
(dp72
g7
g2
(g66
g4
NtRp73
(dp74
g69
(lp75
g2
(g3
g4
NtRp76
(dp77
g7
g2
(g66
g4
NtRp78
(dp79
g69
(lp80
g2
(g3
g4
NtRp81
(dp82
g7
g2
(g66
g4
NtRp83
(dp84
g69
(lp85
g2
(ctheano.sandbox.cuda.var
CudaNdarrayVariable
p86
g4
NtRp87
(dp88
g7
g2
(g66
g4
NtRp89
(dp90
g69
(lp91
g2
(g86
g4
NtRp92
(dp93
g7
g2
(g66
g4
NtRp94
(dp95
g69
(lp96
g5
asg9
(itheano.gof.utils
scratchpad
p97
(dp98
bsS'outputs'
p99
(lp100
g92
asS'op'
p101
g2
(ctheano.sandbox.cuda.basic_ops
GpuFromHost
p102
g4
NtRp103
(dp104
S'_op_use_c_code'
p105
S'g++'
p106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p107
(dp108
g12
(lp109
(S'/home/mrocklin/workspace/ape/ape/master.py'
p110
I64
S'ith_output'
p111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp112
a(S'/home/mrocklin/workspace/dicdag/dicdag/theano/theano_dag.py'
p113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp114
a(S'/home/mrocklin/workspace/theano/theano/sandbox/cuda/basic_ops.py'
p115
I118
S'make_node'
p116
S'dtype=x.dtype)()])'
tp117
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp118
asbsg25
g2
(ctheano.sandbox.cuda.type
CudaNdarrayType
p119
g4
NtRp120
(dp121
g29
g30
sg36
Nsbsg36
S'gpu_Sigma'
p122
sbag2
(g86
g4
NtRp123
(dp124
g7
g2
(g66
g4
NtRp125
(dp126
g69
(lp127
g2
(g86
g4
NtRp128
(dp129
g7
g2
(g66
g4
NtRp130
(dp131
g69
(lp132
g38
asg9
(itheano.gof.utils
scratchpad
p133
(dp134
bsg99
(lp135
g128
asg101
g2
(g102
g4
NtRp136
(dp137
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p138
(dp139
g12
(lp140
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp141
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp142
a(g115
I118
g116
S'dtype=x.dtype)()])'
tp143
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp144
asbsg25
g2
(g119
g4
NtRp145
(dp146
g29
g49
sg36
Nsbsg36
S'gpu_H'
p147
sbasg9
(itheano.gof.utils
scratchpad
p148
(dp149
bsg99
(lp150
g123
asg101
g2
(ctheano.sandbox.cuda.basic_ops
GpuDimShuffle
p151
g4
NtRp152
(dp153
S'drop'
p154
(lp155
sS'shuffle'
p156
(lp157
I1
aI0
asS'augment'
p158
(lp159
sS'input_broadcastable'
p160
g49
sS'new_order'
p161
(I1
I0
tp162
sS'view_map'
p163
(dp164
I0
(lp165
I0
assg105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p166
(dp167
g12
(lp168
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp169
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp170
a(S'/home/mrocklin/workspace/theano/theano/sandbox/cuda/basic_ops.py'
p171
I354
g116
S'return Apply(self, [input], [CudaNdarrayType(broadcastable=ob)()])'
tp172
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp173
asbsg25
g2
(g119
g4
NtRp174
(dp175
g29
(I00
I00
tp176
sg36
Nsbsg36
S'gpu_H_dot_T_2'
p177
sbasg9
(itheano.gof.utils
scratchpad
p178
(dp179
bsg99
(lp180
g87
asg101
g2
(ctheano.sandbox.cuda.blas
GpuDot22
p181
g4
NtRp182
(dp183
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p184
(dp185
g12
(lp186
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp187
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp188
a(S'/home/mrocklin/workspace/theano/theano/sandbox/cuda/blas.py'
p189
I32
g116
S'return Apply(self, [x, y], [otype()])'
tp190
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp191
asbsg25
g2
(g119
g4
NtRp192
(dp193
g29
(I00
I00
tp194
sg36
Nsbsg36
S'gpu_A'
p195
sbasg9
(itheano.gof.utils
scratchpad
p196
(dp197
bsg99
(lp198
g81
asg101
g2
(ctheano.sandbox.cuda.basic_ops
HostFromGpu
p199
g4
NtRp200
(dp201
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p202
(dp203
g12
(lp204
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp205
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp206
a(S'/home/mrocklin/workspace/theano/theano/sandbox/cuda/basic_ops.py'
p207
I64
g116
S'broadcastable=x.broadcastable)()])'
tp208
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp209
asbsg25
g2
(g26
g4
NtRp210
(dp211
g29
(I00
I00
tp212
sg31
S'float32'
p213
sg33
g35
sg36
Nsbsg36
S'A'
sbag2
(g3
g4
NtRp214
(dp215
g7
g2
(g66
g4
NtRp216
(dp217
g69
(lp218
g2
(g3
g4
NtRp219
(dp220
g7
g2
(g66
g4
NtRp221
(dp222
g69
(lp223
g50
ag2
(g3
g4
NtRp224
(dp225
g7
g2
(g66
g4
NtRp226
(dp227
g69
(lp228
g2
(g86
g4
NtRp229
(dp230
g7
g2
(g66
g4
NtRp231
(dp232
g69
(lp233
g128
ag2
(g86
g4
NtRp234
(dp235
g7
g2
(g66
g4
NtRp236
(dp237
g69
(lp238
g2
(g3
g4
NtRp239
(dp240
g7
g2
(g66
g4
NtRp241
(dp242
g69
(lp243
g5
ag2
(g3
g4
NtRp244
(dp245
g7
g2
(g66
g4
NtRp246
(dp247
g69
(lp248
g38
asg9
(itheano.gof.utils
scratchpad
p249
(dp250
bsg99
(lp251
g244
asg101
g2
(ctheano.tensor.elemwise
DimShuffle
p252
g4
NtRp253
(dp254
g154
(lp255
sg156
(lp256
I1
aI0
asg158
(lp257
sg160
g49
sS'inplace'
p258
I00
sg161
(I1
I0
tp259
sg105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p260
(dp261
bsg25
g2
(g26
g4
NtRp262
(dp263
g29
(I00
I00
tp264
sg31
g32
sg33
g35
sg36
Nsbsg36
S'H_dot_T_6'
p265
sbasg9
(itheano.gof.utils
scratchpad
p266
(dp267
bsg99
(lp268
g239
asg101
g2
(ctheano.tensor.basic
Dot
p269
g4
NtRp270
(dp271
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p272
(dp273
bsg25
g2
(g26
g4
NtRp274
(dp275
g29
(I00
I00
tp276
sg31
S'float32'
p277
sg33
g35
sg36
Nsbsg36
S'_5'
p278
sbasg9
(itheano.gof.utils
scratchpad
p279
(dp280
bsg99
(lp281
g234
asg101
g2
(g102
g4
NtRp282
(dp283
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p284
(dp285
g12
(lp286
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp287
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp288
a(g115
I118
g116
S'dtype=x.dtype)()])'
tp289
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp290
asbsg25
g2
(g119
g4
NtRp291
(dp292
g29
g276
sg36
Nsbsg36
S'gpu__5'
p293
sbasg9
(itheano.gof.utils
scratchpad
p294
(dp295
bsg99
(lp296
g229
asg101
g182
sbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p297
(dp298
g12
(lp299
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp300
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp301
a(g189
I32
g116
S'return Apply(self, [x, y], [otype()])'
tp302
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp303
asbsg25
g2
(g119
g4
NtRp304
(dp305
g29
(I00
I00
tp306
sg36
Nsbsg36
S'gpu__4'
p307
sbasg9
(itheano.gof.utils
scratchpad
p308
(dp309
bsg99
(lp310
g224
asg101
g2
(g199
g4
NtRp311
(dp312
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p313
(dp314
g12
(lp315
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp316
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp317
a(g207
I64
g116
S'broadcastable=x.broadcastable)()])'
tp318
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp319
asbsg25
g2
(g26
g4
NtRp320
(dp321
g29
(I00
I00
tp322
sg31
g213
sg33
g35
sg36
Nsbsg36
S'_4'
p323
sbasg9
(itheano.gof.utils
scratchpad
p324
(dp325
bsg99
(lp326
g219
asg101
g2
(ctheano.tensor.elemwise
Elemwise
p327
g4
NtRp328
(dp329
S'__module__'
p330
S'tensor'
p331
sS'scalar_op'
p332
g2
(ctheano.scalar.basic
Add
p333
g4
NtRp334
(dp335
S'output_types_preference'
p336
ctheano.scalar.basic
upcast_out
p337
sg105
g106
sg36
S'add'
p338
sbsg36
S'Elemwise{add,no_inplace}'
p339
sg105
g106
sS'destroy_map'
p340
(dp341
sS'nfunc_spec'
p342
(g338
I2
I1
tp343
sS'inplace_pattern'
p344
(dp345
sS'__doc__'
p346
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p347
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p348
(dp349
g12
(lp350
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp351
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp352
a(S'/home/mrocklin/workspace/theano/theano/tensor/elemwise.py'
p353
I563
g116
S'for dtype, broadcastable in zip(out_dtypes, out_broadcastables)'
tp354
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp355
asbsg25
g2
(g26
g4
NtRp356
(dp357
g29
(I00
I00
tp358
sg31
S'float32'
p359
sg33
g35
sg36
Nsbsg36
S'B'
sbag2
(g3
g4
NtRp360
(dp361
g7
g2
(g66
g4
NtRp362
(dp363
g69
(lp364
g2
(g63
g4
NtRp365
(dp366
g7
g2
(g66
g4
NtRp367
(dp368
g69
(lp369
sg9
(itheano.gof.utils
scratchpad
p370
(dp371
g12
(lp372
(g110
I59
g111
S'tomachine))'
tp373
a(S'/home/mrocklin/workspace/theano/theano/tensor/io.py'
p374
I247
S'recv'
p375
S'return MPIRecvWait(tag)(*irecv(shape, dtype, source, tag))'
tp376
a(S'/home/mrocklin/workspace/theano/theano/tensor/io.py'
p377
I245
S'irecv'
p378
S'return MPIRecv(source, tag, shape, dtype)()'
tp379
a(S'/home/mrocklin/workspace/theano/theano/gof/op.py'
p380
I382
g23
S'self.add_tag_trace(node)'
tp381
asbsg99
(lp382
g365
ag2
(g3
g4
NtRp383
(dp384
g7
g367
sg8
I1
sg9
(itheano.gof.utils
scratchpad
p385
(dp386
bsg25
g2
(g26
g4
NtRp387
(dp388
g29
(I00
I00
tp389
sg31
S'float32'
p390
sg33
g35
sg36
Nsbsg36
Nsbasg101
g2
(ctheano.tensor.io
MPIRecv
p391
g4
NtRp392
(dp393
g29
(I00
I00
tp394
sg31
g35
sS'source'
p395
I0
sS'shape'
p396
(cnumpy.core.multiarray
scalar
p397
(g34
(S'i8'
I0
I1
tRp398
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xf4\x01\x00\x00\x00\x00\x00\x00'
tRp399
g397
(g398
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp400
tp401
sg9
I0
sg105
g106
sS'_info'
p402
(I0
I0
g401
S'float32'
p403
tp404
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p405
(dp406
bsg25
g2
(ctheano.gof.type
Generic
p407
g4
NtRp408
sg36
Nsbag383
asg9
(itheano.gof.utils
scratchpad
p409
(dp410
g12
(lp411
(S'/home/mrocklin/workspace/dicdag/dicdag/dag.py'
p412
I118
S'_build_var'
p413
S'return ith_output(fn, inputs, idx, var)'
tp414
a(g110
I59
g111
S'tomachine))'
tp415
a(g374
I247
g375
S'return MPIRecvWait(tag)(*irecv(shape, dtype, source, tag))'
tp416
a(g380
I382
g23
S'self.add_tag_trace(node)'
tp417
asbsg99
(lp418
g360
asg101
g2
(ctheano.tensor.io
MPIRecvWait
p419
g4
NtRp420
(dp421
g105
g106
sg9
I0
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p422
(dp423
bsg25
g2
(g26
g4
NtRp424
(dp425
g29
(I00
I00
tp426
sg31
g390
sg33
g35
sg36
Nsbsg36
S'_9'
p427
sbasg9
(itheano.gof.utils
scratchpad
p428
(dp429
bsg99
(lp430
g214
asg101
g2
(ctheano.sandbox.linalg.ops
Solve
p431
g4
NtRp432
(dp433
S'A_structure'
p434
S'general'
p435
sg105
g106
sS'overwrite_A'
p436
I00
sS'lower'
p437
I00
sS'overwrite_b'
p438
I00
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p439
(dp440
bsg25
g2
(g26
g4
NtRp441
(dp442
g29
(I00
I00
tp443
sg31
S'float32'
p444
sg33
g35
sg36
Nsbsg36
S'_8'
p445
sbasg9
(itheano.gof.utils
scratchpad
p446
(dp447
bsg99
(lp448
g76
asg101
g270
sbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p449
(dp450
bsg25
g2
(g26
g4
NtRp451
(dp452
g29
(I00
I00
tp453
sg31
S'float32'
p454
sg33
g35
sg36
Nsbsg36
S'_7'
p455
sbasg9
(itheano.gof.utils
scratchpad
p456
(dp457
g12
(lp458
(g110
I47
g111
S'tagfn(frommachine, str(var), tomachine))'
tp459
a(S'/home/mrocklin/workspace/theano/theano/tensor/io.py'
p460
I242
S'send'
p461
S'return MPISendWait(tag)(isend(var, dest, tag))'
tp462
a(S'/home/mrocklin/workspace/theano/theano/tensor/io.py'
p463
I240
S'isend'
p464
S'return MPISend(dest, tag)(var)'
tp465
a(g380
I382
g23
S'self.add_tag_trace(node)'
tp466
asbsg99
(lp467
g71
asg101
g2
(ctheano.tensor.io
MPISend
p468
g4
NtRp469
(dp470
S'dest'
p471
I0
sg105
g106
sg9
I1
sg402
(I0
I1
tp472
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p473
(dp474
bsg25
g408
sg36
Nsbasg9
(itheano.gof.utils
scratchpad
p475
(dp476
g12
(lp477
(g412
I118
g413
S'return ith_output(fn, inputs, idx, var)'
tp478
a(g110
I47
g111
S'tagfn(frommachine, str(var), tomachine))'
tp479
a(g460
I242
g461
S'return MPISendWait(tag)(isend(var, dest, tag))'
tp480
a(g380
I382
g23
S'self.add_tag_trace(node)'
tp481
asbsg99
(lp482
g64
asg101
g2
(ctheano.tensor.io
MPISendWait
p483
g4
NtRp484
(dp485
g105
g106
sg9
I1
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p486
(dp487
bsg25
g408
sg36
S'mpi_token__7'
p488
sbag2
(g3
g4
NtRp489
(dp490
g7
g2
(g66
g4
NtRp491
(dp492
g69
(lp493
g5
ag2
(g3
g4
NtRp494
(dp495
g7
g2
(g66
g4
NtRp496
(dp497
g69
(lp498
g2
(g86
g4
NtRp499
(dp500
g7
g2
(g66
g4
NtRp501
(dp502
g69
(lp503
g2
(g86
g4
NtRp504
(dp505
g7
g2
(g66
g4
NtRp506
(dp507
g69
(lp508
g87
ag2
(g86
g4
NtRp509
(dp510
g7
g2
(g66
g4
NtRp511
(dp512
g69
(lp513
g2
(g3
g4
NtRp514
(dp515
g7
g2
(g66
g4
NtRp516
(dp517
g69
(lp518
g219
ag38
asg9
(itheano.gof.utils
scratchpad
p519
(dp520
bsg99
(lp521
g514
asg101
g432
sbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p522
(dp523
bsg25
g2
(g26
g4
NtRp524
(dp525
g29
(I00
I00
tp526
sg31
S'float32'
p527
sg33
g35
sg36
Nsbsg36
S'_3'
p528
sbasg9
(itheano.gof.utils
scratchpad
p529
(dp530
bsg99
(lp531
g509
asg101
g2
(g102
g4
NtRp532
(dp533
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p534
(dp535
g12
(lp536
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp537
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp538
a(g115
I118
g116
S'dtype=x.dtype)()])'
tp539
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp540
asbsg25
g2
(g119
g4
NtRp541
(dp542
g29
g526
sg36
Nsbsg36
S'gpu__3'
p543
sbasg9
(itheano.gof.utils
scratchpad
p544
(dp545
bsg99
(lp546
g504
asg101
g182
sbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p547
(dp548
g12
(lp549
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp550
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp551
a(g189
I32
g116
S'return Apply(self, [x, y], [otype()])'
tp552
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp553
asbsg25
g2
(g119
g4
NtRp554
(dp555
g29
(I00
I00
tp556
sg36
Nsbsg36
S'gpu__1'
p557
sbag92
asg9
(itheano.gof.utils
scratchpad
p558
(dp559
bsg99
(lp560
g499
asg101
g182
sbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p561
(dp562
g12
(lp563
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp564
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp565
a(g189
I32
g116
S'return Apply(self, [x, y], [otype()])'
tp566
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp567
asbsg25
g2
(g119
g4
NtRp568
(dp569
g29
(I00
I00
tp570
sg36
Nsbsg36
S'gpu__0'
p571
sbasg9
(itheano.gof.utils
scratchpad
p572
(dp573
bsg99
(lp574
g494
asg101
g2
(g199
g4
NtRp575
(dp576
g105
g106
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p577
(dp578
g12
(lp579
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp580
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp581
a(g207
I64
g116
S'broadcastable=x.broadcastable)()])'
tp582
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp583
asbsg25
g2
(g26
g4
NtRp584
(dp585
g29
(I00
I00
tp586
sg31
g213
sg33
g35
sg36
Nsbsg36
S'_0'
p587
sbasg9
(itheano.gof.utils
scratchpad
p588
(dp589
bsg99
(lp590
g489
asg101
g2
(g327
g4
NtRp591
(dp592
g330
g331
sg332
g2
(ctheano.scalar.basic
Sub
p593
g4
NtRp594
(dp595
g336
g337
sg105
g106
sg36
S'sub'
p596
sbsg36
S'Elemwise{sub,no_inplace}'
p597
sg105
g106
sg340
(dp598
sg342
(S'subtract'
p599
I2
I1
tp600
sg344
(dp601
sg346
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p602
sbsbsg8
I0
sg9
(itheano.gof.utils
scratchpad
p603
(dp604
g12
(lp605
(g110
I64
g111
S'return dicdag.theano.theano_dag.ith_output(fn, inputs, idx, old_var)'
tp606
a(g113
I101
g111
S'new_var = fn.make_node(*inputs).outputs[idx]'
tp607
a(g353
I563
g116
S'for dtype, broadcastable in zip(out_dtypes, out_broadcastables)'
tp608
a(g22
I319
g23
S'return utils.add_tag_trace(self.make_variable(name))'
tp609
asbsg25
g2
(g26
g4
NtRp610
(dp611
g29
(I00
I00
tp612
sg31
S'float32'
p613
sg33
g35
sg36
Nsbsg36
S'updated_Sigma'
p614
sbat.